# aws/vpc-ue1.tf
#
##############################################################################
# HashiCorp Terraform and Vault Workshop
#
# This Terraform configuration will create the following:
#
# AWS VPC with a subnet
# A Linux server running HashiCorp Vault and a simple application
# A hosted RDS MySQL database server

provider "aws" {
  alias = "use-1"
  region  = "us-east-1"
}

resource "aws_key_pair" "tf_use1-ec2_key" {
  provider = "aws.use-1"
  key_name = "tf-${var.prefix}-${var.env}-_ec2_key"
#  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCjOXiqjoBMlfCBvmG6BcUGPv1q+YqNYLHlm6X18Frue+Yf2zG/56pMWtSoPbHKB+Nul0VNpANuOyt3qsEU+HtZz9MMTBiWL6kGH6S0saLMp7EpcZaib/Qxfkl1By6JnOwr6w7eW+XE4TXHRdBKaRWW4J52KdhlPXAeMFeSDL3qnZWaP7tIyKTQzdDXu0rSJIBpcYCVCQ5BkshWNvoVpDH0dH9r4ayLrzgnNzQHyqVFASU3DxqIAqrC3JflAz1aUWiwXhDJeZU3w6eDWvYxOAm+Z2vP5oiX/pqbYMlCUlPrsU5+6828kDQ5uQaZiCnSi2Bj3BDqpJngiVvyicJgvhW9 pephan@Mac-mini.local"
  public_key = "${file("~/.ssh/id_rsa.pub")}"
}

module "vpc-use1" {
  providers = { aws = "aws.use-1" }
  source = "terraform-aws-modules/vpc/aws"
  name = "tf-${var.prefix}-${var.env}-use1-vpc"
  cidr = "10.11.0.0/16"
  azs = ["us-east-1a","us-east-1b"]
  # public_subnets = ["10.11.1.0/24","10.11.2.0/24"]
  private_subnets     = ["10.11.11.0/24", "10.11.12.0/24"]
  enable_dns_hostnames = true
  enable_dns_support = true
  # enable_nat_gateway = true
  # single_nat_gateway = true
  tags = {
    Owner       = "Peter Phan"
    Environment = "${var.env}"
    Name        = "tf-${var.prefix}-${var.env}-use1"
  }
  igw_tags = { Name = "tf-${var.prefix}-${var.env}-use1-IGW" }
  nat_gateway_tags = { Name = "tf-${var.prefix}-${var.env}-use1-NGW"}
  public_route_table_tags = { Name = "tf-${var.prefix}-${var.env}-use1-RT-public" }
  public_subnet_tags = { Name = "ctf-${var.prefix}-${var.env}-use1-public" }
  private_route_table_tags = { Name = "tf-${var.prefix}-${var.env}-use1-RT-private" }
  private_subnet_tags = { Name = "tf-${var.prefix}-${var.env}-use1-private" }
}


# resource "aws_security_group" "vpc-use1-bastion-sg" {
#   provider = aws.use-1
#   name        = "tf-${var.prefix}-${var.env}-bastion-sg"
#   description = "Vault Security Group"
#   vpc_id      = "${module.vpc-use1.vpc_id}"

#   ingress {
#     from_port   = 22
#     to_port     = 22
#     protocol    = "tcp"
#     cidr_blocks = ["0.0.0.0/0"]
#   }
#   egress {
#     from_port       = 0
#     to_port         = 0
#     protocol        = "-1"
#     cidr_blocks     = ["0.0.0.0/0"]
#   }
#   tags = {
#     Name = "tf-${var.prefix}-${var.env}-workshop"
#     TTL = "72"
#     owner = "pphan@hashicorp.com"
#   }
# }

resource "aws_security_group" "vpc-use1-ping-ssh-sg" {
  provider = "aws.use-1"
  name        = "tf-${var.prefix}-${var.env}-ping-ssh-sg"
  # description = "Internal Security Group"
  vpc_id      = "${module.vpc-use1.vpc_id}"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = -1
    to_port     = -1
    protocol    = "icmp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    cidr_blocks     = ["0.0.0.0/0"]
  }
  tags = {
    Name = "tf-${var.prefix}-${var.env}-workshop"
    TTL = "72"
    owner = "pphan@hashicorp.com"
  }
}

data "aws_ami" "use1-ubuntu" {
  provider = "aws.use-1"
  most_recent = true

  filter {
      name   = "name"
      values = ["ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-*"]
  }

  filter {
      name   = "virtualization-type"
      values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}

resource "aws_instance" "vpc-use1-pri-ubuntu" {
  provider = "aws.use-1"
  ami           = "${data.aws_ami.use1-ubuntu.id}"
  #ami                         = "${var.ubuntu_ami}"
  instance_type               = "${var.vm_size}"
  subnet_id                   = "${module.vpc-use1.private_subnets[0]}"
  vpc_security_group_ids     = ["${aws_security_group.vpc-use1-ping-ssh-sg.id}", "${module.vpc-use1.default_security_group_id}"]
  key_name                    = "${aws_key_pair.tf_use1-ec2_key.key_name}"
  private_ip                  = "10.11.11.10"
  # user_data                   = "${data.template_file.user_data.rendered}"

  tags = {
    Name = "tf-${var.prefix}-${var.env}-use1-ubuntu-workshop"
    TTL = "72"
    owner = "pphan@hashicorp.com"
  }
}